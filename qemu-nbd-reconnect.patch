diff --git a/block/nbd-client.h b/block/nbd-client.h
index e841340..df727a9 100644
--- a/block/nbd-client.h
+++ b/block/nbd-client.h
@@ -56,4 +56,6 @@
 void nbd_client_attach_aio_context(BlockDriverState *bs,
                                    AioContext *new_context);
 
+int nbd_reconnect(BlockDriverState *bs);
+
 #endif /* NBD_CLIENT_H */
diff --git a/block/nbd-client.c b/block/nbd-client.c
index edf2199..41651da 100644
--- a/block/nbd-client.c
+++ b/block/nbd-client.c
@@ -105,6 +105,7 @@
 
 fail:
     nbd_teardown_connection(bs);
+    nbd_reconnect(bs);
 }
 
 static void nbd_restart_write(void *opaque)
diff --git a/block/nbd.c b/block/nbd.c
index 2176186..8dd854f 100644
--- a/block/nbd.c
+++ b/block/nbd.c
@@ -38,12 +38,27 @@
 #include "qapi/qmp/qstring.h"
 #include "qemu/cutils.h"
 
+#include "qemu/sockets.h"
+#include <sys/types.h>
+#include <unistd.h>
+#include <poll.h>
+#include <sys/ioctl.h>
+
+#define LOG(msg, ...) do { \
+    fprintf(stderr, "%s:%s():L%d: " msg "\n", \
+            __FILE__, __FUNCTION__, __LINE__, ## __VA_ARGS__); \
+} while(0)
+
 #define EN_OPTSTR ":exportname="
 
 typedef struct BDRVNBDState {
     NbdClientSession client;
+    QDict *opts;
+    char *export;
 } BDRVNBDState;
 
+const int RETRY_COUNT = 100;
+
 static int nbd_parse_uri(const char *filename, QDict *options)
 {
     URI *uri;
@@ -291,7 +306,6 @@
     return creds;
 }
 
-
 static int nbd_open(BlockDriverState *bs, QDict *options, int flags,
                     Error **errp)
 {
@@ -303,9 +317,16 @@
     QCryptoTLSCreds *tlscreds = NULL;
     const char *hostname = NULL;
     int ret = -EINVAL;
+    int retry = 0;
+
+    /*Copy options*/
+    if (!s->opts) {
+        s->opts = qdict_clone_shallow(options);
+    }
 
     /* Pop the config into our state object. Exit if invalid. */
     saddr = nbd_config(s, options, &export, errp);
+    /* Pop the config into our state object. Exit if invalid. */
     if (!saddr) {
         goto error;
     }
@@ -325,18 +346,46 @@
         hostname = saddr->u.inet.data->host;
     }
 
+ retry:
     /* establish TCP connection, return error if it fails
      * TODO: Configurable retry-until-timeout behaviour.
      */
     sioc = nbd_establish_connection(saddr, errp);
     if (!sioc) {
-        ret = -ECONNREFUSED;
-        goto error;
+        if (retry < RETRY_COUNT) {
+          LOG("nbd establish connect %s retry %u\n", export, retry);
+          sleep(1);
+          retry ++;
+          goto retry;
+        } else {
+          LOG("nbd establish connect failed %s\n", export);
+          ret = -ECONNREFUSED;
+          goto error;
+        }
+    }
+
+    if(s->export) {
+        g_free(s->export);
+        s->export = NULL;
     }
+    s->export = g_strdup(export);
 
     /* NBD handshake */
     ret = nbd_client_init(bs, sioc, export,
                           tlscreds, hostname, errp);
+    if(ret) {
+      if(retry < RETRY_COUNT) {
+          LOG("nbd client init %s retry %u\n", export, retry);
+          sleep(1);
+          retry ++;
+          if (sioc) {
+              object_unref(OBJECT(sioc));
+          }
+          goto retry;
+      } else {
+        LOG("nbd client init failed %s\n", export);
+      }
+    }
  error:
     if (sioc) {
         object_unref(OBJECT(sioc));
@@ -349,10 +398,102 @@
     return ret;
 }
 
+int nbd_reconnect(BlockDriverState *bs)
+{
+    BDRVNBDState *s = bs->opaque;
+    QDict *opts = qdict_clone_shallow(s->opts);
+    int ret = nbd_open(bs, opts, 0, NULL);
+    qdict_destroy_obj(QOBJECT(opts));
+    return ret;
+}
+
+static int nbd_reconnected(int sock, const char *export)
+{
+    int ret, toread;
+    struct pollfd pfd;
+
+    if (sock == -1) {
+        return 0;
+    } else {
+        pfd.fd = sock;
+        pfd.events = POLLIN;
+        pfd.revents = 0;
+        ret = poll(&pfd, 1, 0);
+        if (ret < 0) {
+            LOG("%s need close\n", export);
+            return 0;
+        } else {
+            if (pfd.revents) {
+                ret = ioctl(sock, FIONREAD, &toread);
+                if (ret < 0) {
+                    LOG("%s need close\n", export);
+                    return 0;
+                }
+
+                if (toread == 0) {
+                    LOG("%s need close\n", export);
+                    return 0;
+                } else {
+                    return 1;
+                }
+            } else {
+                //LOG("%s already connect\n", export);
+                return 1;
+            }
+        }
+    }
+}
+
+static int nbd_wait_reconnect(BlockDriverState *bs)
+{
+    int retry = 0;
+    BDRVNBDState *s = bs->opaque;
+    NbdClientSession *client = nbd_get_client_session(bs);
+
+    while (1) {
+        if(!client->sioc) {
+            co_aio_sleep_ns(bdrv_get_aio_context(bs), QEMU_CLOCK_REALTIME,
+                    1000000000ULL);
+            retry ++;
+            return -EIO;
+        }
+        if (nbd_reconnected(client->sioc->fd, s->export)) {
+            return 0;
+        } else {
+            retry++;
+            co_aio_sleep_ns(bdrv_get_aio_context(bs), QEMU_CLOCK_REALTIME,
+                    1000000000ULL);
+
+            LOG("wait connect %s retry %u\n", s->export, retry);
+
+            if (retry > 300) {
+                return -EIO;
+            }
+        }
+    }
+}
+
+
 static int nbd_co_readv(BlockDriverState *bs, int64_t sector_num,
                         int nb_sectors, QEMUIOVector *qiov)
 {
-    return nbd_client_co_readv(bs, sector_num, nb_sectors, qiov);
+    int ret;
+    while (1) {
+        ret =  nbd_client_co_readv(bs, sector_num, nb_sectors, qiov);
+        if (ret < 0) {
+            BDRVNBDState *s = bs->opaque;
+            ret = nbd_wait_reconnect(bs);
+            if (ret < 0) {
+                LOG("connect %s fail\n", s->export);
+                return ret;
+            }
+
+            LOG("recommit %s\n", s->export);
+        } else {
+            break;
+        }
+    }
+    return 0;
 }
 
 static int nbd_co_writev_flags(BlockDriverState *bs, int64_t sector_num,
@@ -360,15 +501,36 @@
 {
     int ret;
 
-    ret = nbd_client_co_writev(bs, sector_num, nb_sectors, qiov, &flags);
-    if (ret < 0) {
-        return ret;
+    while (1) {
+        ret = nbd_client_co_writev(bs, sector_num, nb_sectors, qiov, &flags);
+        if (ret < 0) {
+            BDRVNBDState *s = bs->opaque;
+            ret = nbd_wait_reconnect(bs);
+            if (ret < 0) {
+                LOG("connect %s fail\n", s->export);
+                return ret;
+            }
+        } else {
+            break;
+        }
     }
 
     /* The flag wasn't sent to the server, so we need to emulate it with an
      * explicit flush */
     if (flags & BDRV_REQ_FUA) {
-        ret = nbd_client_co_flush(bs);
+        while (1) {
+            ret = nbd_client_co_flush(bs);
+            if (ret < 0) {
+                BDRVNBDState *s = bs->opaque;
+                ret = nbd_wait_reconnect(bs);
+                if (ret < 0) {
+                    LOG("connect %s fail\n", s->export);
+                    return ret;
+                }
+            } else {
+                break;
+            }
+        }
     }
 
     return ret;
@@ -382,7 +544,24 @@
 
 static int nbd_co_flush(BlockDriverState *bs)
 {
-    return nbd_client_co_flush(bs);
+    int ret;
+
+    while (1) {
+        ret = nbd_client_co_flush(bs);
+        if (ret < 0) {
+            BDRVNBDState *s = bs->opaque;
+            ret = nbd_wait_reconnect(bs);
+            if (ret < 0) {
+                LOG("connect %s fail\n", s->export);
+                return ret;
+            }
+            //LOG("recommit %s\n", s->export);
+        } else {
+            break;
+        }
+    }
+
+    return 0;
 }
 
 static void nbd_refresh_limits(BlockDriverState *bs, Error **errp)
@@ -399,6 +578,15 @@
 
 static void nbd_close(BlockDriverState *bs)
 {
+    BDRVNBDState *s = bs->opaque;
+    if (s->opts) {
+        QDECREF(s->opts);
+        s->opts = NULL;
+    }
+    if (s->export) {
+        g_free(s->export);
+        s->export = NULL;
+    }
     nbd_client_close(bs);
 }
 
